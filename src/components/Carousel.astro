---
import Image from '~/components/common/Image.astro';

export interface Props {
  images: { src: string; alt: string }[];
  autoPlay?: boolean;
  autoPlayInterval?: number;
  showIndicators?: boolean;
  showArrows?: boolean;
  showProgress?: boolean;
}

const {
  images,
  showIndicators = true,
  showArrows = true,
  showProgress = true
} = Astro.props;
---

<div id="carousel" class="relative left-1/2 right-1/2 -mx-[50vw] w-screen overflow-hidden mt-4 mb-8 group">
  <!-- Progress Bar -->
  {showProgress && (
    <div class="absolute top-0 left-0 right-0 z-20">
      <div id="progress-bar" class="h-1 bg-gradient-to-r from-primary to-secondary transition-all duration-300 ease-out"></div>
    </div>
  )}

  <!-- Main Carousel Container -->
  <div class="relative overflow-hidden rounded-2xl shadow-2xl">
    <div id="carousel-inner" class="flex transition-all duration-1000 ease-out h-[280px] md:h-[360px] lg:h-[440px] xl:h-[520px]">
      {images.map(({ src, alt }, index) => (
        <div class="relative flex-shrink-0 w-full h-full group/slide">
          <Image
            src={src}
            alt={alt}
            width={1920}
            height={520}
            layout="cover"
            loading={index === 0 ? "eager" : "lazy"}
            sizes="100vw"
            widths={[640, 1024, 1280, 1920]}
            aspectRatio="3.7:1"
            fetchpriority={index === 0 ? "high" : "low"}
            class="w-full h-full object-cover object-center transform transition-all duration-700 group-hover/slide:scale-105"
          />

          <!-- Overlay Gradient -->
          <div class="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-black/20"></div>

          <!-- Slide Content Overlay (Optional) -->
          <div class="absolute inset-0 flex items-center justify-center opacity-0 group-hover/slide:opacity-100 transition-opacity duration-500">
            <div class="text-center text-white transform translate-y-4 group-hover/slide:translate-y-0 transition-transform duration-500">
              <h3 class="text-2xl md:text-3xl font-bold mb-2 text-shadow-lg">{alt}</h3>
              <div class="w-16 h-1 bg-accent mx-auto rounded-full"></div>
            </div>
          </div>
        </div>
      ))}
    </div>

    <!-- Side Gradients for Depth -->
    <div class="pointer-events-none absolute inset-y-0 left-0 w-16 sm:w-32 bg-gradient-to-r from-black/40 to-transparent z-10"></div>
    <div class="pointer-events-none absolute inset-y-0 right-0 w-16 sm:w-32 bg-gradient-to-l from-black/40 to-transparent z-10"></div>
  </div>

  <!-- Navigation Arrows -->
  {showArrows && (
    <>
      <button
        id="prevBtn"
        class="absolute left-6 top-1/2 -translate-y-1/2 z-30 bg-white/10 backdrop-blur-md text-white p-4 rounded-full shadow-xl opacity-0 group-hover:opacity-100 transition-all duration-500 hover:bg-white/20 hover:scale-110 focus:outline-none focus:ring-2 focus:ring-white focus:ring-opacity-75 group/btn"
        aria-label="Imagen anterior"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 transition-transform duration-300 group-hover/btn:-translate-x-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
      </button>
      <button
        id="nextBtn"
        class="absolute right-6 top-1/2 -translate-y-1/2 z-30 bg-white/10 backdrop-blur-md text-white p-4 rounded-full shadow-xl opacity-0 group-hover:opacity-100 transition-all duration-500 hover:bg-white/20 hover:scale-110 focus:outline-none focus:ring-2 focus:ring-white focus:ring-opacity-75 group/btn"
        aria-label="Imagen siguiente"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 transition-transform duration-300 group-hover/btn:translate-x-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </button>
    </>
  )}

  <!-- Enhanced Indicators -->
  {showIndicators && (
    <div class="absolute bottom-6 left-1/2 -translate-x-1/2 z-30">
      <div id="pagination-dots" class="flex items-center space-x-3 bg-black/20 backdrop-blur-md rounded-full px-4 py-2">
        {images.map((_, index) => (
          <button
            data-index={index}
            class="relative group/dot"
            aria-label={`Ir a imagen ${index + 1}`}
          >
            <div class="w-3 h-3 bg-white/40 rounded-full transition-all duration-500 hover:bg-white/70 hover:scale-125 focus:outline-none focus:ring-2 focus:ring-white focus:ring-opacity-75"></div>
            <div class="absolute inset-0 w-3 h-3 bg-white rounded-full scale-0 group-hover/dot:scale-150 group-hover/dot:bg-white/80 transition-all duration-300"></div>
          </button>
        ))}
      </div>

      <!-- Slide Counter -->
      <div class="text-center mt-3">
        <span id="slide-counter" class="text-white/80 text-sm font-medium bg-black/20 backdrop-blur-md px-3 py-1 rounded-full">
          1 / {images.length}
        </span>
      </div>
    </div>
  )}

  <!-- Loading Animation -->
  <div id="loading-overlay" class="absolute inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center opacity-100 transition-opacity duration-500 z-40">
    <div class="flex flex-col items-center space-y-4">
      <div class="w-12 h-12 border-4 border-white/30 border-t-white rounded-full animate-spin"></div>
      <p class="text-white/80 text-sm font-medium">Cargando im√°genes...</p>
    </div>
  </div>
</div>

<script type="module">
  class ProfessionalCarousel {
    constructor() {
      this.carousel = document.getElementById('carousel');
      this.inner = document.getElementById('carousel-inner');
      this.prevBtn = document.getElementById('prevBtn');
      this.nextBtn = document.getElementById('nextBtn');
      this.paginationDotsContainer = document.getElementById('pagination-dots');
      this.progressBar = document.getElementById('progress-bar');
      this.slideCounter = document.getElementById('slide-counter');
      this.loadingOverlay = document.getElementById('loading-overlay');

      this.dots = this.paginationDotsContainer ? Array.from(this.paginationDotsContainer.children) : [];
      this.slides = Array.from(this.inner.children);
      this.totalImages = this.slides.length;
      this.current = 0;
      this.autoSlideInterval = null;
      this.progressInterval = null;
      this.isTransitioning = false;
      this.touchStartX = 0;
      this.touchEndX = 0;

      this.init();
    }

    init() {
      this.setupEventListeners();
      this.updateCarousel();
      this.startAutoSlide();
      this.hideLoadingOverlay();
      this.setupTouchEvents();
    }

    hideLoadingOverlay() {
      if (this.loadingOverlay) {
        setTimeout(() => {
          this.loadingOverlay.style.opacity = '0';
          setTimeout(() => {
            this.loadingOverlay.style.display = 'none';
          }, 500);
        }, 1000);
      }
    }

    updateCarousel(smooth = true) {
      if (this.isTransitioning) return;
      this.isTransitioning = true;

      // Update transform with smooth transition
      this.inner.style.transition = smooth ? 'transform 1s cubic-bezier(0.4, 0, 0.2, 1)' : 'none';
      this.inner.style.transform = `translateX(-${this.current * 100}%)`;

      // Update indicators
      this.updateIndicators();

      // Update slide counter
      if (this.slideCounter) {
        this.slideCounter.textContent = `${this.current + 1} / ${this.totalImages}`;
      }

      // Preload next image for better performance
      this.preloadNextImage();

      // Reset transition flag after animation
      setTimeout(() => {
        this.isTransitioning = false;
      }, 1000);
    }

    updateIndicators() {
      this.dots.forEach((dot, index) => {
        const innerDot = dot.querySelector('div:first-child');
        if (index === this.current) {
          dot.classList.add('active');
          innerDot.classList.remove('bg-white/40', 'hover:bg-white/70');
          innerDot.classList.add('bg-white', 'scale-125');
        } else {
          dot.classList.remove('active');
          innerDot.classList.remove('bg-white', 'scale-125');
          innerDot.classList.add('bg-white/40', 'hover:bg-white/70');
        }
      });
    }

    preloadNextImage() {
      const nextIndex = (this.current + 1) % this.totalImages;
      const nextSlide = this.slides[nextIndex];
      if (nextSlide) {
        const img = nextSlide.querySelector('img');
        if (img && !img.complete) {
          // Create a new Image object to preload
          const preloadImg = new Image();
          preloadImg.src = img.src;
          // Also preload srcset if available
          if (img.srcset) {
            preloadImg.srcset = img.srcset;
          }
        }
      }
    }

    updateProgressBar() {
      if (!this.progressBar) return;

      let progress = 0;
      const duration = 5000; // 5 seconds
      const interval = 50; // Update every 50ms
      const increment = (interval / duration) * 100;

      clearInterval(this.progressInterval);
      this.progressInterval = setInterval(() => {
        progress += increment;
        if (progress >= 100) {
          progress = 100;
          clearInterval(this.progressInterval);
        }
        this.progressBar.style.width = `${progress}%`;
      }, interval);
    }

    startAutoSlide() {
      clearInterval(this.autoSlideInterval);
      this.updateProgressBar();

      this.autoSlideInterval = setInterval(() => {
        this.next();
      }, 5000);
    }

    next() {
      this.current = (this.current + 1) % this.totalImages;
      this.updateCarousel();
      this.startAutoSlide();
    }

    prev() {
      this.current = (this.current - 1 + this.totalImages) % this.totalImages;
      this.updateCarousel();
      this.startAutoSlide();
    }

    goToSlide(index) {
      if (index !== this.current) {
        this.current = index;
        this.updateCarousel();
        this.startAutoSlide();
      }
    }

    setupEventListeners() {
      // Navigation buttons
      if (this.prevBtn) {
        this.prevBtn.addEventListener('click', () => this.prev());
      }

      if (this.nextBtn) {
        this.nextBtn.addEventListener('click', () => this.next());
      }

      // Pagination dots
      this.dots.forEach((dot, index) => {
        dot.addEventListener('click', () => this.goToSlide(index));
      });

      // Pause on hover
      this.carousel.addEventListener('mouseenter', () => {
        clearInterval(this.autoSlideInterval);
        clearInterval(this.progressInterval);
        if (this.progressBar) {
          this.progressBar.style.transition = 'width 0.3s ease-out';
          this.progressBar.style.width = '0%';
        }
      });

      this.carousel.addEventListener('mouseleave', () => this.startAutoSlide());

      // Keyboard navigation
      document.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft') {
          this.prev();
        } else if (e.key === 'ArrowRight') {
          this.next();
        }
      });
    }

    setupTouchEvents() {
      this.carousel.addEventListener('touchstart', (e) => {
        this.touchStartX = e.changedTouches[0].screenX;
      });

      this.carousel.addEventListener('touchend', (e) => {
        this.touchEndX = e.changedTouches[0].screenX;
        this.handleSwipe();
      });
    }

    handleSwipe() {
      const swipeThreshold = 50;
      const swipeDistance = this.touchStartX - this.touchEndX;

      if (Math.abs(swipeDistance) > swipeThreshold) {
        if (swipeDistance > 0) {
          this.next(); // Swipe left
        } else {
          this.prev(); // Swipe right
        }
      }
    }
  }

  // Initialize carousel when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new ProfessionalCarousel();
  });

  // Also initialize on Astro page load
  document.addEventListener('astro:page-load', () => {
    new ProfessionalCarousel();
  });
</script>
