---
export interface Props {
  images: { src: string; alt: string }[];
}

const { images } = Astro.props;
---

<div id="carousel" class="relative w-full overflow-hidden rounded-xl shadow-2xl my-12 group">
  <div id="carousel-inner" class="flex transition-transform duration-700 ease-in-out h-[350px]">
    {images.map(({ src, alt }) => (
      <img
        src={src}
        alt={alt}
        class="flex-shrink-0 w-full h-full object-cover object-center transform transition-transform duration-500 hover:scale-105"
        data-animate="animate-fade-in-up"
      />
    ))}
  </div>

  <button
    id="prevBtn"
    class="absolute left-4 top-1/2 -translate-y-1/2 bg-white/30 backdrop-blur-sm text-white p-3 rounded-full shadow-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300 hover:bg-white/50 focus:outline-none focus:ring-2 focus:ring-white focus:ring-opacity-75"
    aria-label="Anterior"
  >
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
    </svg>
  </button>
  <button
    id="nextBtn"
    class="absolute right-4 top-1/2 -translate-y-1/2 bg-white/30 backdrop-blur-sm text-white p-3 rounded-full shadow-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300 hover:bg-white/50 focus:outline-none focus:ring-2 focus:ring-white focus:ring-opacity-75"
    aria-label="Siguiente"
  >
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
    </svg>
  </button>

  <div id="pagination-dots" class="absolute bottom-4 left-1/2 -translate-x-1/2 flex space-x-2">
    {images.map((_, index) => (
      <button
        data-index={index}
        class="w-3 h-3 bg-white/50 rounded-full transition-all duration-300 hover:bg-white focus:outline-none focus:ring-2 focus:ring-white focus:ring-opacity-75"
      ></button>
    ))}
  </div>
</div>

<script type="module">
  const inner = document.getElementById('carousel-inner');
  const prevBtn = document.getElementById('prevBtn');
  const nextBtn = document.getElementById('nextBtn');
  const paginationDotsContainer = document.getElementById('pagination-dots');
  const dots = Array.from(paginationDotsContainer.children);
  const totalImages = inner.children.length;
  let current = 0;
  let autoSlideInterval;

  const updateCarousel = () => {
    inner.style.transform = `translateX(-${current * 100}%)`;
    dots.forEach((dot, index) => {
      if (index === current) {
        dot.classList.add('bg-white');
        dot.classList.remove('bg-white/50');
      } else {
        dot.classList.remove('bg-white');
        dot.classList.add('bg-white/50');
      }
    });
  };

  const startAutoSlide = () => {
    clearInterval(autoSlideInterval); // Clear any existing interval
    autoSlideInterval = setInterval(() => {
      current = (current + 1) % totalImages;
      updateCarousel();
    }, 4000);
  };

  // Event Listeners
  prevBtn.onclick = () => {
    current = (current - 1 + totalImages) % totalImages;
    updateCarousel();
    startAutoSlide(); // Reset auto-slide on manual interaction
  };

  nextBtn.onclick = () => {
    current = (current + 1) % totalImages;
    updateCarousel();
    startAutoSlide(); // Reset auto-slide on manual interaction
  };

  dots.forEach(dot => {
    dot.onclick = (e) => {
      current = parseInt(e.target.dataset.index);
      updateCarousel();
      startAutoSlide(); // Reset auto-slide on manual interaction
    };
  });

  // Initialize carousel and start auto-slide
  updateCarousel();
  startAutoSlide();

  // Pause auto-slide on hover
  const carousel = document.getElementById('carousel');
  carousel.addEventListener('mouseenter', () => clearInterval(autoSlideInterval));
  carousel.addEventListener('mouseleave', startAutoSlide);
</script>
