---
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Button from '~/components/ui/Button.astro';
import Image from '~/components/common/Image.astro';
import type { Testimonials as Props } from '~/types';

const {
  title = '',
  subtitle = '',
  tagline = '',
  testimonials = [],
  callToAction,

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-6xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <Headline title={title} subtitle={subtitle} tagline={tagline} />

  <div class="grid sm:grid-cols-2 lg:grid-cols-3 gap-8">
    {
      testimonials &&
        testimonials.map(({ title, testimonial, name, job, image }, index) => (
          <div class={`flex h-auto stagger-${(index % 8) + 1} animate-fade-in-up`}>
            <div class="card flex flex-col p-6 md:p-8 rounded-2xl shadow-soft dark:card-dark hover:shadow-large hover-lift hover-glow transition-all duration-500 group cursor-pointer">
              {title && (
                <h2 class="text-xl font-semibold leading-6 pb-4 text-primary group-hover:text-secondary transition-all duration-300 group-hover:animate-wiggle">
                  {title}
                </h2>
              )}
              {testimonial && (
                <blockquote class="flex-auto">
                  <p class="text-muted text-lg leading-relaxed italic group-hover:text-shimmer transition-all duration-300">
                    "{testimonial}"
                  </p>
                </blockquote>
              )}

              <hr class="border-gray-200 dark:border-slate-600 my-6 group-hover:border-primary transition-colors duration-300" />

              <div class="flex items-center">
                {image && (
                  <div class="h-14 w-14 rounded-full border-2 border-primary shadow-soft group-hover:border-secondary group-hover:animate-pulse transition-all duration-300">
                    {typeof image === 'string' ? (
                      <Fragment set:html={image} />
                    ) : (
                      <Image
                        class="h-14 w-14 rounded-full min-w-full min-h-full object-cover group-hover:scale-110 transition-transform duration-300"
                        width={56}
                        height={56}
                        widths={[400, 768]}
                        layout="fixed"
                        {...image}
                      />
                    )}
                  </div>
                )}

                <div class="grow ml-4 rtl:ml-0 rtl:mr-4">
                  {name && (
                    <p class="text-lg font-bold text-gray-900 dark:text-white group-hover:text-primary transition-colors duration-300">
                      {name}
                    </p>
                  )}
                  {job && (
                    <p class="text-sm text-primary font-medium group-hover:text-secondary transition-colors duration-300">
                      {job}
                    </p>
                  )}
                </div>
              </div>
            </div>
          </div>
        ))
    }
  </div>
  {
    callToAction && (
      <div class="flex justify-center mx-auto w-fit mt-8 md:mt-12 font-medium">
        <Button {...callToAction} />
      </div>
    )
  }
</WidgetWrapper>
