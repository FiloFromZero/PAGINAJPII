---
// src/components/Chatbot.astro
---
<div id="chatbot-wrapper">
  <button id="chatbot-toggle" title="Abrir Chat">
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"/>
    </svg>
  </button>

  <div id="chatbot-container" class="chatbot-container">
    <div class="chatbot-header">
      <h3>Asistente Virtual</h3>
      <button id="chatbot-close" title="Cerrar Chat">×</button>
    </div>
    <div id="chatbot-messages" class="chatbot-messages">
      <div class="message bot">
        ¡Hola! 👋 ¿Sobre qué necesitas información?<br>
        <b>Opciones:</b><br>
        1- Historia del colegio<br>
        2- Información de admisiones<br>
        3- Solicitudes de secretaría académica<br>
        4- Cómo pagar<br>
        5- Comunicarse con una dependencia<br>
        6- Deseas trabajar con nosotros<br>
        7- Deseas comunicarte con un humano
      </div>
    </div>
    <div class="chatbot-input-area">
      <input type="text" id="chatbot-input" placeholder="Escribe tu mensaje..." />
      <button id="chatbot-send" title="Enviar Mensaje">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
          <path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"/>
        </svg>
      </button>
    </div>
  </div>
</div>

<style>
  #chatbot-wrapper {
    position: fixed;
    /* Ajusta este 'bottom' para que esté por encima del botón de WhatsApp */
    /* Considerando que el botón de WhatsApp mide 60px de alto y tiene un 'bottom' de 30px, */
    /* 30px (bottom WhatsApp) + 60px (altura WhatsApp) + 20px (margen entre botones) = 110px */
    bottom: 110px; /* Ajustado para apilar sobre el botón de WhatsApp */
    right: 30px;
    z-index: 1001; /* Mayor que el z-index del botón de WhatsApp (1000) */
  }

  #chatbot-toggle {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background: linear-gradient(135deg, #6366f1, #8b5cf6);
    border: none;
    cursor: pointer;
    box-shadow: 0 8px 24px rgba(99, 102, 241, 0.3);
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    animation: float 3s ease-in-out infinite;
    /* position: relative;  Este 'position: relative;' aquí no es necesario y puede ser confuso. */
    /* El botón ya está dentro de #chatbot-wrapper que es fixed. */
    /* z-index: 1001;  Este z-index ya está en el wrapper, no es necesario aquí */
  }

  #chatbot-toggle:hover {
    transform: scale(1.1) rotate(10deg);
    box-shadow: 0 12px 32px rgba(99, 102, 241, 0.4);
  }

  #chatbot-toggle svg {
    color: white;
    width: 28px;
    height: 28px;
  }

  .chatbot-container {
    width: 350px;
    height: 500px;
    border-radius: 20px;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
    opacity: 0;
    transform: translateY(20px) scale(0.95);
    transform-origin: bottom right;
    transition: opacity 0.3s cubic-bezier(0.4, 0, 0.2, 1), transform 0.3s cubic-bezier(0.4, 0, 0.2, 1), visibility 0.3s;
    overflow: hidden;
    position: absolute; /* Esto hace que el contenedor del chat se posicione relativo a #chatbot-wrapper */
    bottom: 80px; /* Ajusta la posición del popup del chat sobre el botón de toggle */
    right: 0;
    display: flex;
    flex-direction: column;
    visibility: hidden;
  }

  .chatbot-container.active {
    opacity: 1;
    transform: translateY(0) scale(1);
    visibility: visible;
  }

  .chatbot-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 16px 20px;
    background: linear-gradient(135deg, #6366f1, #8b5cf6);
    color: white;
    flex-shrink: 0;
  }

  .chatbot-header h3 {
    margin: 0;
    font-weight: 600;
    font-size: 1.2rem;
  }

  #chatbot-close {
    background: none;
    border: none;
    color: white;
    font-size: 24px;
    cursor: pointer;
    padding: 0 8px;
    transition: transform 0.2s;
  }

  #chatbot-close:hover {
    transform: scale(1.2);
  }

  .chatbot-messages {
    flex-grow: 1;
    padding: 16px;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    gap: 12px;
    background: rgba(249, 250, 251, 0.7);
  }

  .message {
    padding: 12px 16px;
    border-radius: 16px;
    max-width: 80%;
    font-size: 0.95rem;
    line-height: 1.4;
    animation: messageIn 0.3s ease;
    word-wrap: break-word;
  }

  .message.user {
    background: #6366f1;
    color: white;
    align-self: flex-end;
    border-bottom-right-radius: 4px;
  }

  .message.bot {
    background: white;
    color: #1f2937;
    align-self: flex-start;
    border-bottom-left-radius: 4px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  }

  .chatbot-input-area {
    display: flex;
    gap: 8px;
    padding: 16px;
    background: white;
    border-top: 1px solid #e5e7eb;
    flex-shrink: 0;
  }

  #chatbot-input {
    flex-grow: 1;
    border: 1px solid #e5e7eb;
    border-radius: 12px;
    padding: 10px 16px;
    font-size: 0.95rem;
    transition: all 0.2s;
  }

  #chatbot-input:focus {
    outline: none;
    border-color: #6366f1;
    box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
  }

  #chatbot-send {
    background: #6366f1;
    border: none;
    border-radius: 12px;
    padding: 10px 14px;
    color: white;
    cursor: pointer;
    transition: all 0.2s;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  #chatbot-send svg {
    width: 20px;
    height: 20px;
  }

  #chatbot-send:hover {
    background: #4f46e5;
    transform: translateY(-1px);
  }

  @keyframes float {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-8px); }
  }

  @keyframes messageIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .chatbot-messages::-webkit-scrollbar {
    width: 6px;
  }

  .chatbot-messages::-webkit-scrollbar-track {
    background: rgba(0, 0, 0, 0.05);
    border-radius: 3px;
  }

  .chatbot-messages::-webkit-scrollbar-thumb {
    background: #a5b4fc;
    border-radius: 4px;
  }

  .chatbot-messages::-webkit-scrollbar-thumb:hover {
    background: #6366f1;
  }

  /* Modo nocturno para el chatbot */
  :root.dark #chatbot-wrapper .chatbot-container,
  html.dark #chatbot-wrapper .chatbot-container {
    background: #18181b !important;
    color: #f3f4f6 !important;
  }
  :root.dark #chatbot-wrapper .chatbot-header,
  html.dark #chatbot-wrapper .chatbot-header {
    background: #27272a !important;
    color: #f3f4f6 !important;
  }
  :root.dark #chatbot-wrapper .chatbot-messages,
  html.dark #chatbot-wrapper .chatbot-messages {
    background: #18181b !important;
    color: #f3f4f6 !important;
  }
  :root.dark #chatbot-wrapper .message.bot,
  html.dark #chatbot-wrapper .message.bot {
    background: #23232b !important;
    color: #f3f4f6 !important;
  }
  :root.dark #chatbot-wrapper .message.user,
  html.dark #chatbot-wrapper .message.user {
    background: #6366f1 !important;
    color: #fff !important;
  }
  :root.dark #chatbot-wrapper .chatbot-input-area,
  html.dark #chatbot-wrapper .chatbot-input-area {
    background: #23232b !important;
    color: #f3f4f6 !important;
    border-top: 1px solid #27272a;
  }
  :root.dark #chatbot-wrapper #chatbot-input,
  html.dark #chatbot-wrapper #chatbot-input {
    background: #18181b !important;
    color: #f3f4f6 !important;
    border: 1px solid #27272a;
  }
  :root.dark #chatbot-wrapper #chatbot-input:focus,
  html.dark #chatbot-wrapper #chatbot-input:focus {
    border-color: #6366f1;
    box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.15);
  }
  :root.dark #chatbot-wrapper #chatbot-send,
  html.dark #chatbot-wrapper #chatbot-send {
    background: #6366f1 !important;
    color: #fff !important;
  }
</style>

<script>
  let isInitialized = false;

  function initializeChatbot() {
    if (isInitialized) return;
    isInitialized = true;

    const wrapper = document.getElementById('chatbot-wrapper');
    const toggle = document.getElementById('chatbot-toggle');
    const container = document.getElementById('chatbot-container');
    const close = document.getElementById('chatbot-close');
    const input = document.getElementById('chatbot-input') as HTMLInputElement;
    const send = document.getElementById('chatbot-send');
    const messages = document.getElementById('chatbot-messages');

    if (!wrapper || !toggle || !container || !close || !input || !send || !messages) {
      console.error('No se pudieron encontrar todos los elementos del chatbot');
      return;
    }

    toggle.addEventListener('click', () => {
      container.classList.toggle('active');
      if (container.classList.contains('active')) {
        toggle.innerHTML = `
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M18 6L6 18M6 6l12 12"/>
          </svg>
        `;
      } else {
        toggle.innerHTML = `
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"/>
          </svg>
        `;
      }
    });

    close.addEventListener('click', () => {
      container.classList.remove('active');
      toggle.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"/>
        </svg>
      `;
    });

    const addMessage = (text: string, isUser: boolean) => {
      const message = document.createElement('div');
      message.className = `message ${isUser ? 'user' : 'bot'}`;
      message.textContent = text;
      messages.appendChild(message);
      messages.scrollTop = messages.scrollHeight;
    };

    const handleUserMessage = (text: string) => {
      addMessage(text, true);
      
      setTimeout(() => {
        let response = '';
        switch(text.toLowerCase()) {
          case '1':
            response = 'El Instituto Psicopedagógico Juan Pablo II fue fundado en 1995...';
            break;
          case '2':
            response = 'Para el proceso de admisión necesitas: 1. Documentos del estudiante 2. Documentos de los padres...';
            break;
          case '3':
            response = 'Para solicitudes académicas, puedes contactar a la secretaría al teléfono 8545966...';
            break;
          case '4':
            response = 'Los pagos se pueden realizar en efectivo, transferencia bancaria o PSE...';
            break;
          case '5':
            response = 'Puedes contactar a las diferentes dependencias a través de: Tel: 8545966, Email: info@jpii.edu.co';
            break;
          case '6':
            response = 'Para trabajar con nosotros, por favor completa el formulario de contacto en la página...';
            break;
          case '7':
            response = 'Puedes contactar a un asesor humano al teléfono 8545966 o WhatsApp 319 6721410';
            break;
          default:
            response = 'Por favor, selecciona una opción del 1 al 7 para obtener más información.';
        }
        addMessage(response, false);
      }, 500);
    };

    send.addEventListener('click', () => {
      const text = input.value.trim();
      if (text) {
        handleUserMessage(text);
        input.value = '';
      }
    });

    input.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        const text = input.value.trim();
        if (text) {
          handleUserMessage(text);
          input.value = '';
        }
      }
    });
  }

  // Intentar inicializar inmediatamente
  initializeChatbot();

  // También intentar inicializar cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', initializeChatbot);

  // Reinicializar cuando Astro actualice la página
  document.addEventListener('astro:page-load', () => {
    isInitialized = false;
    initializeChatbot();
  });
</script>